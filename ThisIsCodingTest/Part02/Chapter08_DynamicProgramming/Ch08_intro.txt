01. 다이나믹 프로그래밍 (Dynamic Programming)

중복되는 연산을 줄이자

우리는 프로그램을 작성하는 것에 있어서 항상 연산 속도와 메모리 공간을 최대한으로 활용할 수 있는 효율적인 알고리즘을 작성해야 한다.
다만, 어떤 문제는 메모리 공간을 약간 더 사용해 연산 속도를 비약적으로 증가시킬 수 있는 방법이 있는데, 이중 하나가 다이나믹 프로그래밍이다.
다이나믹 프로그래밍의 기본적인 2가지 방식(탑다운과 바텀업)에 대해 알아볼 것이다.

우선 기존에 해결하기 힘들었던 문제 중에 다이나믹 프로그래밍으로 해결할 수 있는 문제를 살펴보자.

대표적인 예로는 피보나치 수열이 있다.

1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

1, 1, 1+1, 1+2, 2+3, 3+5, 5+8, 8+13, 13+21, 21+34, 34+55, ...

점화식을 통해 이를 간결하게 표현할 수 있는데, 점화식이란 인접한 항들 사이의 관계식을 의미한다. 예를 들어 수열 {an}이 있을 때 수열에서의
각 항을 an이라 부른다고 가정하자. 점화식을 이용해 현재의 항을 이전의 항에 대한 식으로 표현할 수 있다. 피보나치 수열의 점화식은 다음과 같이
표현된다.

an+2 = f(an+1, an) = an+1 + an

프로그래밍에서는 이런 수열을 배열이나 리스트로 표현할 수 있다.
그렇다면 점화식에 따라 실제로 피보나치 수열을 어떻게 표현할 수 있을까? n번째 피보나치 수를 f(n)이라 표현할 때 4번째 피보나치 수 f(4)를 구하려면,
f 함수를 반복해서 호출할 것이다. 이를 재귀 함수를 사용하면 8-1.py 처럼 표현할 수 있다.

하지만 재귀 함수를 통해 작성하면 n의 수가 커졌을 때 수행 시간이 기하급수적으로 늘어난다는 단점이 있다. 대략 O(2의 n제곱)의 지수 시간이 소요된다고
표현한다. N = 30이면, 약 10억 가량의 연산을 수행해야 한다.

f(6)을 살펴보면 f(3) 같은 함수들은 반복적으로 호출되는 것을 알 수 있다. 이런 것을 다이나믹 프로그래밍을 사용하면 해결 할 수 있다. 다이나믹
프로그래밍은 다음 조건을 만족할 때 사용할 수 있다.

1. 큰 문제를 작은 문제로 나눌 수 있다.
2. 작은 문제에서 구한 정답은 그것을 포함하는 큰 문제에서도 동일하다.

피보나치 수열을 메모이제이션(Memoization) 기법을 사용하여 해결해보자. 메모이제이션은 다이나믹 프로그래밍을 구현하는 방법 중 한 종류로, 한 번
구한 결과를 메모리 공간에 메모해두고 같은 식을 다시 호출하면 메모한 결과를 그대로 가져오는 기법을 의미한다. 메모이제이션은 값을 저장하는 방법이므로
캐싱(Caching)이라고도 한다.

메모이제이션 구현은 8-2.py에 있다. 다이나믹 프로그래밍을 사용했을 때 호출되는 함수는 8-3.py에 있다.

이처럼 재귀 함수를 이용하여 다이나믹 프로그래밍을 작성하는 방법을, 큰 문제를 해결하기 위해 작은 문제를 호출한다고 하여 탑다운(Top-Down) 방식이라고 한다.
반복문을 이용하여 소스코드를 작성하는 경우 작은 문제부터 차근차근 답을 도출한다고 하여 바텀업(Bottom-Up) 방식이라고 한다. 바텀업 방식으로 해결한
피보나치 수열은 8-4.py에 있다.

메모이제이션을 할 때에 따라 배열이나 리스트가 아닌 딕셔너리(dict) 자료형을 사용할 수 있다.