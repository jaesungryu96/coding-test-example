01. 꼭 필요한 자료구조 기초

탐색(search)란 많은 양의 데이터 중에서 원하는 데이터를 찾는 과정

자료구조(Data Structure)란 '데이터를 표현하고 관리하고 처리하기 위한 구조' Push(삽입), Pop(제거)

스택(Stack) : 선입후출 (First In Last Out), 후입선출 (Last In First Out)

큐(Queue) : 선입선출 (First In First Out)

재귀함수(Recursive Function) : 자기자신을 다시 호출하는 함수

02. 탐색 알고리즘 DFS/BFS

Graph는 Node, Edge로 표현되며 이때 Node를 Vertex라고도 부른다.

Graph는 다음과 같이 2가지 방법으로 표현된다.

- 인접 행렬(Adjacency Matrix) : 2차원 배열로 그래프의 연결 관계를 표현하는 방식
- 인접 리스트(Adjacency List) : 리스트로 그래프의 연결 관계를 표현하는 방식

Adjacency Matrix와 Adjacency List의 차이는 메모리와 속도 측면에서 나타난다.
Adjacency Matrix는 모든 관계를 저장하므로 느드 개수가 많을수록 메모리가 불필요하게 낭비된다.
Adjacency List는 연결된 정보만을 저장하기 때문에 메모리를 효율적으로 사용한다.
이런 성질 때문에 Adjacency List 방식은 Adjacency Matrix 방식에 비해 특정한 두 노드가 연결되어 있는지에 대한 정보를 얻는 속도가 느리다.

DFS : Depth-First Search, 깊이 우선 탐색. 그래프에서 깊은 부분을 우선적으로 탐색하는 알고리즘.

DFS는 스택 자료구조를 이용하며 구체적인 동작 과정은 다음과 같다.
1 - 탐색 시작 노드를 스택에 삽입하고 방문 처리를 한다.
2 - 스택의 최상단 노드에 방문하지 않은 인접 노드가 있으면 그 인접 노드를 스택에 넣고 방문 처리를 한다. 방문하지 않은 인접 노드가 없으면 스택에서 최상단 노드를 꺼낸다.
3 - 2번의 과정을 더 이상 수행할 수 없을 때까지 반복한다.

BFS : Breadth Frist Search, 너비 우선 탐색. 가까운 노드부터 탐색하는 알고리즘.

BFS는 큐 자료구조를 이용하여 구현한다. 동작 방식은 다음과 같다.
1 - 탐색 시작 노드를 큐에 삽입하고 방문 처리를 한다.
2 - 큐에서 노드를 꺼내 해당 노드의 인접 노드 중에서 방문하지 않은 노드를 모두 큐에 삽입하고 방문 처리를 한다.
3 - 2번의 과정을 더 이상 수행할 수 없을 때까지 반복한다.