1. 가장 빠른 길 찾기

가장 빠르게 도달하는 방법

최단 경로(Shortest Path) 알고리즘은 말 그대로 가장 짧은 경로를 찾는 알고리즘이다. 상황에 맞는 효율적인 알고리즘이 이미 정립되어 있다.

'한 지점에서 다른 특정 지점까지의 최단 경로를 구해야 하는 경우', '모든 지점에서 다른 모든 지점까지의 최단 경로를 모두 구해야 하는 경우' 등의
사례가 있다.

보통 그래프로 표현되는데 각 지점은 그래프에서 '노드'로, 연결된 도로는 '간선'으로 표현된다. 최단 경로를 출력하는 문제 보다는 단순히 최단 거리를
요구하는 문제가 많이 출제된다.

다익스트라 최단 경로와 플로이드 워셜 알고리즘 유형만 다루려 한다.

다익스트라 최단 경로 알고리즘

다익스트라(Dijkstra) 최단 경로 알고리즘은 그래프에서 여러 개의 노드가 있을 때, 특정한 노드에서 출발하여 다른 노드로 가는 각각의 최단 경로를
구해주는 알고리즘이다. '음의 간선'이 없을 때 정상적으로 동작한다. 동작 원리는 다음과 같다.

1. 출발 노드를 설정한다.
2. 최단 거리 테이블을 초기화한다.
3. 방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드를 선택한다.
4. 해당 노드를 거쳐 다른 노드로 가는 비용을 계산하여 최단 거리 테이블을 갱신한다.
5. 위 과정에서 3과 4번을 반복한다.

다익스트라 알고리즘은 한 단계당 하나의 노드에 대한 최단 거리를 확실히 찾는 것으로 이해할 수 있다.

방법 1. 9-1.py, 간단한 다익스트라 알고리즘 (시간 복잡도 O(V의 제곱), V는 노드의 개수), 매 단계마다 1차원 리스트의 모든 원소를 순차 탐색하기 때문에 느리다.

방법 2. 9-2.py, 개선된 다익스트라 알고리즘 (시간 복잡도 O(ElogV), V는 노드의 개수, E는 간선의 개수), 힙 자료구조를 이용하여 거리가 짧은 노드 탐색 시간을 줄인다.

힙 설명

힙 자료구조는 우선순위 큐(Priority Queue)를 구현하기 위하여 사용하는 자료구조 중 하나다. 5장에서 'DFS/BFS'를 공부할 때 스택(Stack)과 큐(Queue)의
원리에 대해서 알아보았다. 스택은 가장 나중에 삽입된 데이터를 먼저 삭제하고, 큐는 가장 먼저 삽입된 데이터를 가장 먼저 삭제한다. 우선순위 큐는
우선순위가 가장 높은 데이터를 가장 먼저 삭제한다는 점이 특징이다.

우선순위 큐에는 데이터를 (가치, 물건)으로 묶어서 넣을 수 있다. 이때 '가치' 값이 우선순위 값이 되며, 파이썬 라이브러리의 경우 '값이 낮은 데이터가 먼저 삭제' 되는
최소 힙(Min Heap)을 사용한다. 그 반대는 최대 힙(Max Heap)이다.

플로이드 워셜 알고리즘

플로이드 워셜 알고리즘(Floyd-Warshall Algorithm)은 '모든 지점에서 다른 모든 지점까지의 최단 경로를 모두 구해야 하는 경우' 에 사용할 수 있는 알고리즘이다.
구현은 어렵지 않지만, 핵심 아이디어를 이해하는 것이 중요하다.

현재 확인하고 있는 노드를 제외하고, N - 1개의 노드 중에서 서로 다른 노드 (A, B)쌍을 선택한다. 이후에 A -> 1번 노드 -> B로 가는 비용을 확인하고
최단 거리를 갱신한다. 즉, (N-1)P(2) 개의 쌍을 단계마다 반복해서 확인하면 된다. 이때 O((N-2)P(2)) 시간 복잡도는 O(N의 제곱)이고 N번 반복하기 때문에
총 시간 복잡도는 O(N의 3제곱)이다.

9-3.py는 플로이드 워셜 알고리즘의 소스코드이다.