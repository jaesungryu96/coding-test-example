01. 자료형

수 자료형

수 자료형(Number)은 가장 기본적이며 정수형, 실수형으로 나눌 수 있다.

정수형(Integer)

정수를 다루는 자료형이며 양의 정수, 음의 정수, 0이 있다.

-----------------------------------------------------------------------------------------------------------------------
a = 1000
a = -7
a = 0
-----------------------------------------------------------------------------------------------------------------------

실수형(Real Number)

실수형은 소수점 알애의 데이터를 포함하는 수 자료형이다.

-----------------------------------------------------------------------------------------------------------------------
a = 157.93
a = -1387.2
a = 5.
a = -.7
-----------------------------------------------------------------------------------------------------------------------

실수형을 표현하는 방식으로 파이썬에서는 e나 E를 이용한 지수 표현 방식을 이용할 수 있다.

유효숫자e(지수) = 유효숫자 x 10의 (지수) 제곱

-----------------------------------------------------------------------------------------------------------------------
a = 1e9  # 10억
a = 75.25e1  # 752.5
a = 3954e-3  # 3.954
-----------------------------------------------------------------------------------------------------------------------

10진수 체계에서 0.3 + 0.6 = 0.9가 되지만, 컴퓨터의 2진수 체계에서는 정확하게 계산할 수 없다.

-----------------------------------------------------------------------------------------------------------------------
a = 0.3 + 0.6  # 0.899999999999...
-----------------------------------------------------------------------------------------------------------------------

이런 실수를 반올림할 때, round() 함수를 사용한다. 첫 번째 인자는 반올림 할 실수형 데이터, 두 번째 인자는 남기고자 하는 소숫점 위치이다.

-----------------------------------------------------------------------------------------------------------------------
a = 0.3 + 0.6  # 0.89999999999...
round(a, 4)  # 0.9
-----------------------------------------------------------------------------------------------------------------------

수 자료형의 연산

프로그래밍에서는 사칙연산(+, -, *, /)를 이용해 계산한다. 이외에도 나머지 연산, 몫 연산, 거듭제곱 연산(%, //, **) 정도는 알아두자.

-----------------------------------------------------------------------------------------------------------------------
a = 7
b = 3

a / b  # 2.333333333333335
a % b  # 1
a // b  # 2

a ** b  # 343
-----------------------------------------------------------------------------------------------------------------------

리스트 자료형

파이썬의 리스트 자료형은 C나 자바의 배열(Array) 기능을 포함하고 있으며, 내부적으로 연결 리스트 자료구조를 채택하고 있어서 append(), remove()
등의 메서드를 지원한다.

리스트 만들기

리스트는 대괄호([]) 안에 원소를 넣어 초기화하며, 쉼표(,)로 원소를 구분한다. 리스트의 원소에 접근할 때는 인덱스(Index) 값을 괄호 안에 넣는다.
인덱스는 0부터 시작한다. 비어있는 리스트를 선언할 때, 간단히 list() 혹은 빈 대괄호 []를 이용할 수 있다.

-----------------------------------------------------------------------------------------------------------------------
a = [1, 2, 3, 4, 5, 6, 7, 8, 9]

a[4]  # 5

a = list()
a = []      # 빈 리스트 선언

n = 10
a = [0] * n  # 크기가 10이고, 모든 값이 0인 1차원 리스트 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
-----------------------------------------------------------------------------------------------------------------------

리스트의 인덱싱과 슬라이싱

인덱스값을 입력하여 리스트의 특정한 원소에 접근하는 것을 인덱싱(Indexing)이라고 한다. 양의 정수와 음의 정수를 이용할 수 있으며, 음의 정수를
넣으면 거꾸로 탐색하게 된다.

-----------------------------------------------------------------------------------------------------------------------
a = [1, 2, 3, 4, 5]

a[3]  # 4
a[-1] = 2  # [1, 2, 3, 4, 2]
-----------------------------------------------------------------------------------------------------------------------

리스트에서 연속적인 위치를 갖는 원소들을 가져와야 할 때는 슬라이싱(Slicing)을 사용한다. 대괄호 안에 콜론(:)을 넣어서 시작 인덱스와 (끝 인덱스 -1)
을 설정할 수 있다.

-----------------------------------------------------------------------------------------------------------------------
a = [1, 2, 3, 4, 5, 6, 7, 8, 9]

a[1: 4]  # [2, 3, 4]
-----------------------------------------------------------------------------------------------------------------------

리스트 컴프리헨션

리스트 컴프리헨션은 리스트를 초기화하는 방법 중 하나이다. 리스트 컴프리헨션을 사용하면 대괄호([])안에 조건문과 반복문을 넣는 방식으로 리스트를 초기화할 수 있다.

-----------------------------------------------------------------------------------------------------------------------
array = [i for i in range(20) if i % == 1]  # 0 ~ 19 까지 중에 홀수만을 가진 리스트

array = [i * i for range(1, 10)]  # 1 ~ 9 까지의 수의 제곱 값을 가지는 리스트 [1, 4, 9, 16, 25, 36, 49, 64, 81]

n = 3
m = 4

array = [[0] * m for _ in range(n)]  # [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
-----------------------------------------------------------------------------------------------------------------------

반복문에서의 언더바(_)

반복문에서 반복을 위한 변수의 값을 무시하고자 할 때 언더바(_)를 사용한다.

-----------------------------------------------------------------------------------------------------------------------
# Hello World! 를 5번 출력하는 반복문
for _ in range(5):
    print("Hello World!")
-----------------------------------------------------------------------------------------------------------------------

특정 크기의 2차원 배열을 초기화할 때는 반드시 리스트 컴프리헨션을 사용해야 한다.

-----------------------------------------------------------------------------------------------------------------------
n = 3
m = 4
array = [[0] * m] * n  # [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]

array[1][1] = 5  # [[0, 5, 0, 0], [0, 5, 0, 0], [0, 5, 0, 0]]
-----------------------------------------------------------------------------------------------------------------------

이는 내부적으로 포함된 3개의 리스트가 모두 동일한 객체에 대한 3개의 레퍼런스로 인식되기 때문이다.

리스트 관련 기타 메서드

주요 메서드는 다음과 같다.

메서드명      사용법             설명                                시간 복잡도
append()    변수명.append()    리스트에 원소를 하나 삽입할 때 사용       O(1)
sort()      변수명.sort()      기본 정렬 기능으로 오름차순으로 정렬      O(NlogN)
reverse()   변수명.reverse()   리스트의 원소의 순서를 모두 뒤집는다      O(N)
insert()    insert(삽입할 위치  특정한 인덱스 위치에 원소를 삽입한다      O(N)
            인덱스, 삽입할 값)
count()     변수명.count(값)    리스트에서 특정 값의 개수를 반환한다      O(N)
remove()    변수명.remove(값)   특정한 값을 갖는 원소 제거, 여러개일      O(N)
                               때는 하나만 제거한다

리스트에서 특정 값을 모두 제거하기 위해서는 다음과 같이 해아한다.

-----------------------------------------------------------------------------------------------------------------------
a = [1, 2, 3, 4, 5, 5, 5]
remove_set = {3, 5}

result = [i for i in a if i not in remove_set]  # a에서 remove_set 원소에 속하는 원소를 모두 없앰, [1, 2, 4]
-----------------------------------------------------------------------------------------------------------------------

문자열 자료형

문자열 초기화

문자열 변수를 초기화할 때는 큰따옴표("")나 혹은 작은따옴표('')를 사용해야한다. 문자열에 큰따옴표나 작은따옴표가 포함되어야 하는 경우,
큰따옴표 안에는 작은따옴표가, 작은따옴표 안에는 큰따옴표가 포함될 수 있으며, 백슬래쉬(\)를 사용해 포함시킬 수도 있다.

문자열 연산

파이썬은 문자열에 대한 연산도 지원한다.

-----------------------------------------------------------------------------------------------------------------------
a = "Hello"
b = "World"

a + " " + b  # Hello World

a = "String"
a * 3  # StringStringString

a = "ABCDEF"
a[2 : 4]  # CD
-----------------------------------------------------------------------------------------------------------------------

튜플 자료형

파이썬의 튜플 자료형은 리스트와 비슷하지만 다음과 같은 차이가 있다.

- 튜플은 한 번 선언된 값을 변경할 수 없다.
- 리스트는 대괄호([]), 튜플은 소괄호(())를 이용한다.

-----------------------------------------------------------------------------------------------------------------------
a = (1, 2, 3, 4)

a[2] = 7  # 'tuple' object does not support item assignment
-----------------------------------------------------------------------------------------------------------------------

이러한 속성을 이용해 알고리즘을 구현하는 과정에서 변경하면 안 되는 값이 변경되는 것을 방지할 수 있다. 또한 리스트에 비해 상대적으로 공간 효율적이고,
일반적으로 각 원소의 성질이 서로 다를 때 주로 사용한다.

사전 자료형

사전 자료형 소개

사전 자료형은 키(Key)와 값(Value)의 쌍을 데이터로 가지는 자료형이다. 키는 변경 불가능한 데이터이다. 사전을 생각하면 이해하기 편하다.

key         value
사과         Apple
바나나       Banana
코코넛       Coconut

사전 자료형은 내부적으로 '해시 테이블(Hash Table)'을 사용하므로 기본적으로 데이터 검색 및 수정에 있어서 O(1)의 시간에 처리할 수 있다.

-----------------------------------------------------------------------------------------------------------------------
data = dict()
data['사과'] = Apple
data['바나나'] = Banana
data['코코넛'] = Coconut

data  # {'사과' : 'Apple', '바나나' : 'Banana', '코코넛' : 'Coconut'}

# '사과'라는 데이터가 dictionary에 있는지 확인하는 코드, 리스트나 튜플에서도 사용할 수 있다.
if '사과' in data:
    print("yes")
-----------------------------------------------------------------------------------------------------------------------

사전 자료형 관련 함수

-----------------------------------------------------------------------------------------------------------------------
data = dict()
data['사과'] = Apple
data['바나나'] = Banana
data['코코넛'] = Coconut

# 키 데이터만 담은 리스트
key_list = data.keys()
# 밸류 데이터만 담은 리스트
value_list = data.values()

for key in key_list:
    print(data[key])
-----------------------------------------------------------------------------------------------------------------------

집합 자료형

집합 자료형 소개

파이썬에서는 집합(Set)을 처리하기 위한 집합 자료형을 제공한다. 다음과 같은 특징이 있다.

- 중복을 허용하지 않는다.
- 순서가 없다.

인덱싱을 통해 자료형의 값을 얻을 수 없다. '특정한 데이터가 이미 등장한 적이 있는지 여부'를 체크할 때 매우 효과적이다.

집합 자료형의 연산

합집합, 교집합, 차집합 연산이 있다.

-----------------------------------------------------------------------------------------------------------------------
a = set([1, 2, 3, 4, 5])
b = set([3, 4, 5, 6, 7])

a | b  # 합집합 {1, 2, 3, 4, 5, 6, 7}
a & b  # 교집합 {3, 4, 5}
a - b  # 차집합 {1, 2}
-----------------------------------------------------------------------------------------------------------------------

집합 자료형 관련 함수

-----------------------------------------------------------------------------------------------------------------------
data = set([1, 2, 3])

# 새로운 원소 추가
data.add(4)

# 새로운 원소 여러개 추가
data.update([5, 6])

# 특정한 값을 갖는 원소 삭제
data.remove(3)
-----------------------------------------------------------------------------------------------------------------------